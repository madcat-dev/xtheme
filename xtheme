#!/usr/bin/env bash

LC_ALL=C
# using as library?
[[ "${0}" != "${BASH_SOURCE}" ]] && \
    XTHEME_IS_LIB=True || XTHEME_IS_LIB=

# Defaults and exports --------------------------------------------------------
export XTHEME_CACHE=${XTHEME_CACHE:-$HOME/.cache/xtheme}
export XTHEME_CONFIG=${XTHEME_CONFIG:-$HOME/.config/xtheme}
export XTHEME_PREFER_DARK_THEME=${XTHEME_PREFER_DARK_THEME:-1}
export XTHEME_CURSOR_COLOR="#FFA501"
export XTHEME_BACKGROUND_VALUE=10
export XTHEME_FOREGROUND_VALUE=80
export DEBUG=${DEBUG}

WELCOME='
 `.`    `.`  `........`  `.`    `.   `........   ``     `.`  `........
 =#"    :#+  ="/:$$"/"~  /#^    :#+  ^#!//////, -$#*   ,&#"  /#!//////.
 .!@*``/@;.     -@#.     :@/    !@=  *@:        -@##+ `;$@;  "@/
  `^$&&$^`      -@#.     "@:~~~~$@=  *@!~~~~-   -@;/$,/&^@;  "@;~~~~-
   ,!@@!.       -@#.     "@!^^^*$@=  *@&^^^^=`  -@&.;$#~=@;  "@!^^^^+
  ^#&~+&$=      -@#.     "@/    !@=  *@:        -@$`.*+ ^@;  "@/
 +@&.  .$@+     -@#.     :@/    !@=  *@!++++++. -@$.    *@;  "@;++++++`
 ,=-    ~=,     `=+      -=,    ~=.  ,========. `=+     ,=~  -========`
                                        Lazy generator of colorschemes
Usage: xtheme [OPTIONS]...
   or: xtheme [OPTIONS]... COLORSCHEME
Show preview of COLORSCHEME, or show "Xresources" imported colorscheme

Mandatory arguments to long options are mandatory for short options too
    -i, --image      IMAGE          import colorscheme from IMAGE
    -m, --merge      THEME          merge colorscheme with THEME
    -H, --hue        VALUE          change hue
    -S, --saturation VALUE          change satuation
    -V, --value      VALUE          change value
                                    VALUE: [+-]{integer value}[%]
    -s, --save       DESTINATION    save colorscheme to DESTINATION
    --light                         generate a light colorscheme
    --install                       install colorscheme
    --help                          display this help and exit
'
# -----------------------------------------------------------------------------
export STDERR=/dev/null
[[ ${DEBUG} ]] && STDERR=/dev/stderr

xrdbq() {
    xrdb -query | grep -w "${1}:" | head -n1 | cut -f 2
}

min() {
    printf "%s\n" $@ | sort -g | head -n1 2>$STDERR
}

max() {
    printf "%s\n" $@ | sort -gr | head -n1 2>$STDERR
}

lim() {
    local val=${1:-0} lo=${2:-0} hi=${3:-255}
    [[ $val -lt $lo ]] && val=$lo
    [[ $val -gt $hi ]] && val=$hi
    echo $val
}

fatal() {
    echo -e "\033[31;1m[!] ${@}\033[0m" >&2
    echo -e "    trace: ${FUNCNAME[*]}" >$STDERR
    kill -9 $$ && sleep 9999
}

error() {
    echo -e "\033[31m[-] ${@}\033[0m" >&2; return 1
}

warning() {
    echo -e "\033[33m[?] ${@}\033[0m" >&2; return 1
}

info() {
    echo -e "\033[35;1m[ ] ${@}\033[0m" >&2
}

ok() {
    echo -e "\033[32m[+] ${@}\033[0m" >&2
}

# RGB functions ---------------------------------------------------------------
rgb_from_hex() {
    local color=${1/\#/}
    printf "%d %d %d" \
        0x${color:0:2} 0x${color:2:2} 0x${color:4:2} \
        || fatal "Invalid hex value ${1}"
}

rgb_to_hex() {
    local r=$(lim ${1:-0})
    local g=$(lim ${2:-0})
    local b=$(lim ${3:-0})

    printf "#%02X%02X%02X" $r $g $b \
        || fatal "Invalid rgb value"
}

rgb_to_hsv() {
    local RGB
    IFS=" " read -a RGB <<< "$(rgb_from_hex ${1})"
    local r=$(lim ${RGB[0]})
    local g=$(lim ${RGB[1]})
    local b=$(lim ${RGB[2]})

    local minc=$(min $r $g $b)
    local maxc=$(max $r $g $b)

    local v=$(( $maxc * 100 / 255 ))

    [[ "$minc" == "$maxc" ]] && \
        echo 0 0 $(lim $v 0 100) && return

    local s=$(( ($maxc - $minc) * 100 / $maxc ))

    local h=0
    local rc=$(( ($maxc - $r) * 100 / ($maxc - $minc) ))
    local gc=$(( ($maxc - $g) * 100 / ($maxc - $minc) ))
    local bc=$(( ($maxc - $b) * 100 / ($maxc - $minc) ))

    if [[ $r == $maxc ]]; then
        h=$(( $bc - $gc ))
    elif [[ $g == $maxc ]]; then
        h=$(( 200 + $rc - $bc ))
    else
        h=$(( 400 + $gc - $rc ))
    fi

    echo $(( $h * 360 / 600 % 360 )) \
        $(lim $s 0 100) \
        $(lim $v 0 100)
}

hsv_to_rgb() {
    local h=$(( ${1:-0} % 360 ))
    local s=$(lim ${2:-0} 0 100)
    local v=$(lim ${3:-0} 0 100)

    [[ $h -lt 0 ]] && h=$(( $h + 360 ))

    v=$(( $v * 255 / 100 ))
    h=$(( $h * 100 / 360 ))

    [[ $s -eq 0 ]] && \
        rgb_to_hex $v $v $v && return

    local i=$(( $h * 6 / 100 ))
    local f=$(( $h * 6 - $i * 100 ))
    local p=$(( $v * (100 - $s) / 100 ))
    local q=$(( $v * (10000 - $s * $f) / 10000 ))
    local t=$(( $v * (10000 - $s * (100 - $f)) / 10000 ))

    i=$(( $i % 6 ))

    [[ $i -eq 0 ]] && \
        rgb_to_hex $v $t $p && return
    [[ $i -eq 1 ]] && \
        rgb_to_hex $q $v $p && return
    [[ $i -eq 2 ]] && \
        rgb_to_hex $p $v $t && return
    [[ $i -eq 3 ]] && \
        rgb_to_hex $p $q $v && return
    [[ $i -eq 4 ]] && \
        rgb_to_hex $t $p $v && return
    [[ $i -eq 5 ]] && \
        rgb_to_hex $v $p $q && return

    fatal "Invalid conversion"
}

rgb() {
    local HSV value
    IFS=" " read -a HSV <<< "$(rgb_to_hsv ${2})"
    local h=${HSV[0]}
    local s=${HSV[1]}
    local v=${HSV[2]}

    if [[ $1 == "hue" ]]; then
        value="$h"
        [[ $value -eq 0 ]] && value=360
    elif [[ $1 == "saturation" ]]; then
        value="$s"
    elif [[ $1 == "value" ]]; then
        value="$v"
    else
        fatal "invalid '$1' property"
    fi

    [[ ! "${3}" ]] && echo $value && return 0

    [[ "${3}" =~ ^([+-]?)([0-9]+)(%?)$ ]] || fatal "invalid value"
    local rel=${BASH_REMATCH[1]}
    local val=${BASH_REMATCH[2]}
    local pcn=${BASH_REMATCH[3]}

    # percent value
    [[ "$pcn" ]] \
        && val=$(( $value * $val / 100 ))
    # absolute value
    [[ "$rel" ]] \
        && eval "value=$(( $value $rel $val ))" || value=$val

    [[ $1 == "hue" ]]        && hsv_to_rgb $value $s     $v
    [[ $1 == "saturation" ]] && hsv_to_rgb $h     $value $v
    [[ $1 == "value" ]]      && hsv_to_rgb $h     $s     $value
}

# Color-management functions --------------------------------------------------
# Clear all color-variables
clear_colors() {
    local i

    background=
    foreground=
    cursor=

    for i in {0..15}; do
        declare -g color"${i}"=
    done
}

# Import colors from Xresources
import_Xresources_colors() {
    local i

    background=$(xrdbq background)
    foreground=$(xrdbq foreground)
    cursor=$(xrdbq cursor)

    for i in {0..15}; do
        declare -g color"${i}"=$(xrdbq color"${i}")
    done
}

import_colorscheme_colors() {
    local scheme=$(find "${1:--}"* "$XTHEME_CONFIG/colorschemes/${1:--}"* 2>$STDERR | head -n1)

    source "$scheme" 2>$STDERR \
        && XTHEME_NAME=$(basename $scheme) \
        || fatal "colorscheme '${1}' not imported!"
}

import_image_colors() {
    local image="${1/\~/$HOME}"
    local colors

    type -p convert >$STDERR 2>&1 \
        || fatal "imagemagick not found"

    [[ -e "$image" ]] \
        || fatal "image '${1}' not found"

    colors=(
        $(convert "$image" +dither -colors 16 -unique-colors txt:- | grep -E -o " \#.{6}" 2>$STDERR || fatal)
    )

    local l=${#colors[*]}

    background=$(rgb value ${colors[0]} $XTHEME_BACKGROUND_VALUE)
    foreground=$(rgb value ${colors[$(( $l - 1 ))]} $XTHEME_FOREGROUND_VALUE)

    color0=$(rgb value $background +5)
    color1=${colors[$(( $l - 7 ))]}
    color2=${colors[$(( $l - 6 ))]}
    color3=${colors[$(( $l - 5 ))]}
    color4=${colors[$(( $l - 4 ))]}
    color5=${colors[$(( $l - 3 ))]}
    color6=${colors[$(( $l - 2 ))]}
    color7=$(rgb value $foreground +5)
}

modify_colors() {
    for i in {1..6}; do
        local colorD="color$(( i ))"
        local colorL="color$((i+8))"
        declare -g "$colorD"=$(rgb ${1} ${!colorD} ${2})
        declare -g "$colorL"=$(rgb ${1} ${!colorL} ${2})
    done

    if [[ ${3} ]]; then
        background=$(rgb ${1} $background ${2})
        foreground=$(rgb ${1} $foreground ${2})
        color0=$(rgb ${1} $color0 ${2})
        color7=$(rgb ${1} $color7 ${2})
        color8=$(rgb ${1} $color8 ${2})
        color15=$(rgb ${1} $color15 ${2})
    fi
}

make_colors() {
    local i color
    local colors=(
        '#000000' '#800000' '#008000' '#808000'
        '#000080' '#800080' '#008080' '#c0c0c0'
    )
    cursor=${cursor:-$XTHEME_CURSOR_COLOR}

    if [[ ! ${color0} ]]; then
        color0=${colors[0]}
        color8=
        [[ ${background} ]] && color0=$(rgb value $background +5)
    fi

    for i in {1..6}; do
        local colorD="color$(( i ))"
        local colorL="color$((i+8))"
        [[ ! ${!colorD} ]] \
            && declare -g "$colorD"=${colors[$i]} \
            && declare -g "$colorL"=
    done

    if [[ ! ${color7} ]]; then
        color7=${colors[7]}
        color15=
        [[ ${foreground} ]] && color7=$(rgb value $foreground +5)
    fi

    if [[ ! ${background} ]]; then
        background=$(rgb value $color0 $XTHEME_BACKGROUND_VALUE)
        color0=$(rgb value $background +5)
        color8=
    fi
    if [[ ! ${foreground} ]]; then
        foreground=$(rgb value $color7 $XTHEME_FOREGROUND_VALUE)
        color7=$(rgb value $foreground +5)
        color15=
    fi

    for i in {8..15}; do
        local colorD="color$((i-8))"
        local colorL="color$(( i ))"
        declare -g "$colorL"=${!colorL:-$(rgb value ${!colorD} +25)}
    done

    if [[ ! ${XTHEME_PREFER_DARK_THEME} ]]; then
        # make all base colors darker
        modify_colors value -50%
        # swap black and white colors
        color=$foreground; foreground=$background; background=$color
        color=$color0;     color0=$color7;         color7=$color
        color=$color8;     color8=$color15;        color15=$color
    fi

    [[ ${XTHEME_HUE} ]] \
        && modify_colors hue $XTHEME_HUE True
    [[ ${XTHEME_SATURATION} ]] \
        && modify_colors saturation $XTHEME_SATURATION True
    [[ ${XTHEME_VALUE} ]] \
        && modify_colors value $XTHEME_VALUE
}

# XTheme functions ------------------------------------------------------------
preview() {
    local i color

    echo -n "background: "
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $foreground)
    echo -en "  $background  \033[0m  "

    echo -n "foreground: "
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex $foreground)
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
    echo -en "  $foreground  \033[0m  "

    echo -n "cursor: "
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex $cursor)
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
    echo -en "  $cursor  \033[0m  "

    echo
    printf "─%.0s" $(seq 70); echo

    for i in {0..15}; do
        color="color${i}"
        printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex ${!color})
        printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
        echo -n "${!color}"

        [[ $i == 7 || $i == 15 ]] \
            && echo -e "\033[0m" || echo -n "  "
    done
}

apply() {
    local data
    local srce="${1/\~/$HOME}"
    local dest="${2/\~/$HOME}"

    [[ ! -e "$srce" ]] \
        && return $(error "Template '${srce/$HOME/\~}' not existing!")

    rm    -f "$dest" >/dev/null 2>&1
    mkdir -p "$(dirname "${dest}")" >/dev/null 2>&1

    while read -r data; do
        local IFS=$'\x1B'

        [[ ${data} =~ '*DEL!!' ]] && continue

        data="${data//\\/\\x5C}"
        data="${data//\"/\\x22}"
        data=$'\x22'$data$'\x22'

        eval echo -e ${data} >> $dest \
            || return $(error "Template '${dest/$HOME/\~}' not save!")
    done < $srce
}

apply_templates() {
    local path=$(realpath "${1:-$XTHEME_CONFIG/templates}")

    for item in "$path"/*; do
        local name=$(basename "$item")

        [[ ${name:0:1} == "-" ]] && continue

        if [[ -d $item ]]; then
            if [[ ! -e $item/install.sh ]]; then
                apply_templates "$item"
                continue
            fi
            "$item/install.sh" 2>$STDERR \
                && ok "template .../$name is installed" \
                || error "template .../$name is not installed!"
        else
            apply "$item" "$XTHEME_CACHE/$name" 2>$STDERR \
                && ok "template .../$name is installed" \
                || error "template .../$name is not installed!"
        fi
    done
}

# -----------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------
[[ ${XTHEME_IS_LIB} ]] && return # run as a library

export PATH=$(dirname "${BASH_SOURCE:-$0}"):$PATH

mkdir -p "$XTHEME_CACHE"
mkdir -p "$XTHEME_CONFIG"/{templates,colorschemes}

export background foreground cursor
for i in {0..15}; do export color"${i}"; done

[[ -d $(pwd)/templates ]] && XTHEME_CONFIG="$(pwd)"
XTHEME_CONFIG=$(realpath "$XTHEME_CONFIG")

# Parse args ------------------------------------------------------------------
while [ -n "${1}" ]; do
    case ${1} in
        -i|--image)
            XTHEME_IMAGE="${2}"
            XTHEME_NAME=
            shift
            ;;
        -m|--merge)
            XTHEME_MERGE="${2}"
            shift
            ;;
        -H|--hue)
            XTHEME_HUE="${2}"
            shift
            ;;
        -S|--saturation)
            XTHEME_SATURATION="${2}"
            shift
            ;;
        -V|--value)
            XTHEME_VALUE="${2}"
            shift
            ;;
        -s|--save)
            XTHEME_SAVE="${2}"
            shift
            ;;
        --light)
            XTHEME_PREFER_DARK_THEME=
            ;;
        --install)
            XTHEME_INSTALL=Yes
            ;;
        --help)
            echo -e "$WELCOME"
            exit 0
            ;;
        *)
            [[ "${1:0:1}" == '-' ]] \
                && fatal "invalid option -- '$1'"
            XTHEME_NAME="${1}"
            XTHEME_IMAGE=
            ;;
    esac
    shift
done

# Import ----------------------------------------------------------------------
clear_colors

if [[ "${XTHEME_NAME}" ]]; then
    import_colorscheme_colors "$XTHEME_NAME" \
        && ok "colorscheme ${XTHEME_NAME/$HOME/\~} is imported"
elif [[ "${XTHEME_IMAGE}" ]]; then
    import_image_colors "$XTHEME_IMAGE" \
        && ok "colorscheme from image ${XTHEME_IMAGE/$HOME/\~} is imported"
else
    import_Xresources_colors \
        && ok "colorscheme from Xresources is imported"
fi

if [[ "${XTHEME_MERGE}" ]]; then
    import_colorscheme_colors "$XTHEME_MERGE" \
        && ok "colorscheme is merged with ${XTHEME_MERGE/$HOME/\~}"
fi

make_colors
preview

# Save ------------------------------------------------------------------------
if [[ "${XTHEME_SAVE}" ]]; then
    apply "$XTHEME_CONFIG/templates/colors.sh" "$XTHEME_SAVE" >$STDERR \
        && ok "colorscheme is saved to ${XTHEME_SAVE/$HOME/\~}"
fi

# Apply changes ---------------------------------------------------------------
if [[ "${XTHEME_INSTALL}" ]]; then
    apply_templates || exit 1
    echo "Installation is completed to ${XTHEME_CACHE/$HOME/\~}!"
fi
