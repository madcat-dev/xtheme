#!/usr/bin/env bash

LC_ALL=C
# using as library?
[[ "${0}" != "${BASH_SOURCE}" ]] && \
    XTHEME_IS_LIB=True || XTHEME_IS_LIB=

# Defaults --------------------------------------------------------------------
XTHEME_CACHE="$HOME/.xtheme"

XTHEME_PREFER_DARK_THEME=1
XTHEME_CURSOR_COLOR="#FFA501"
XTHEME_IMPORT_SCALE="+18"
XTHEME_BASE_COLOR_SCALE="-15"
XTHEME_COLOR_SCALE="100"
XTHEME_BLACK_COLOR_SCALE="+25"

WELCOME='
 `.`    `.`  `........`  `.`    `.   `........   ``     `.`  `........  
 =#"    :#+  ="/:$$"/"~  /#^    :#+  ^#!//////, -$#*   ,&#"  /#!//////. 
 .!@*``/@;.     -@#.     :@/    !@=  *@:        -@##+ `;$@;  "@/        
  `^$&&$^`      -@#.     "@:~~~~$@=  *@!~~~~-   -@;/$,/&^@;  "@;~~~~-   
   ,!@@!.       -@#.     "@!^^^*$@=  *@&^^^^=`  -@&.;$#~=@;  "@!^^^^+   
  ^#&~+&$=      -@#.     "@/    !@=  *@:        -@$`.*+ ^@;  "@/        
 +@&.  .$@+     -@#.     :@/    !@=  *@!++++++. -@$.    *@;  "@;++++++` 
 ,=-    ~=,     `=+      -=,    ~=.  ,========. `=+     ,=~  -========` 
'
# -----------------------------------------------------------------------------
xrdbq() {
    xrdb -query | grep -w "${1}:" | tail -n1 | cut -f 2
}

min() {
    printf "%s\n" $@ | sort -g | head -n1 2>/dev/null
}

max() {
    printf "%s\n" $@ | sort -gr | head -n1 2>/dev/null
}

lim() {
    local val=${1:-0} lo=${2:-0} hi=${3:-255}
    [[ $val -lt $lo ]] && val=$lo
    [[ $val -gt $hi ]] && val=$hi
    echo $val
}

fatal() {
    echo -e "\033[31;1mfatal: ${@}\033[0m" >&2
    echo -e "    trace: ${FUNCNAME[*]}" >&2
    kill -9 $$ && sleep 9999
}

error() {
    echo -e "\033[31merror: ${@}\033[0m" >&2
    return 1
}

# RGB functions ---------------------------------------------------------------
rgb_from_hex() {
    local color=${1/\#/}
    printf "%d %d %d" \
        0x${color:0:2} 0x${color:2:2} 0x${color:4:2} \
        || fatal "Invalid hex value"
}

rgb_to_hex() {
    local r=$(lim ${1:-0})
    local g=$(lim ${2:-0})
    local b=$(lim ${3:-0})

    printf "#%02X%02X%02X" $r $g $b \
        || fatal "Invalid rgb value"
}

rgb_to_hsv() {
    local RGB
    IFS=" " read -a RGB <<< "$(rgb_from_hex ${1})"
    local r=$(lim ${RGB[0]})
    local g=$(lim ${RGB[1]})
    local b=$(lim ${RGB[2]})

    local minc=$(min $r $g $b)
    local maxc=$(max $r $g $b)

    local v=$(( $maxc * 100 / 255 ))

    [[ "$minc" == "$maxc" ]] && \
        echo 0 0 $(lim $v 0 100) && return

    local s=$(( ($maxc - $minc) * 100 / $maxc ))

    local h=0
    local rc=$(( ($maxc - $r) * 100 / ($maxc - $minc) ))
    local gc=$(( ($maxc - $g) * 100 / ($maxc - $minc) ))
    local bc=$(( ($maxc - $b) * 100 / ($maxc - $minc) ))

    if [[ $r == $maxc ]]; then
        h=$(( $bc - $gc ))
    elif [[ $g == $maxc ]]; then
        h=$(( 200 + $rc - $bc ))
    else
        h=$(( 400 + $gc - $rc ))
    fi

    echo $(( $h * 360 / 600 % 360 )) \
        $(lim $s 0 100) \
        $(lim $v 0 100)
}

hsv_to_rgb() {
    local h=$(( ${1:-0} % 360 ))
    local s=$(lim ${2:-0} 0 100)
    local v=$(lim ${3:-0} 0 100)

    v=$(( $v * 255 / 100 ))
    h=$(( $h * 100 / 360 ))

    [[ $s -eq 0 ]] && \
        rgb_to_hex $v $v $v && return

    local i=$(( $h * 6 / 100 ))
    local f=$(( $h * 6 - $i * 100 ))
    local p=$(( $v * (100 - $s) / 100 ))
    local q=$(( $v * (10000 - $s * $f) / 10000 ))
    local t=$(( $v * (10000 - $s * (100 - $f)) / 10000 ))

    i=$(( $i % 6 ))

    [[ $i -eq 0 ]] && \
        rgb_to_hex $v $t $p && return
    [[ $i -eq 1 ]] && \
        rgb_to_hex $q $v $p && return
    [[ $i -eq 2 ]] && \
        rgb_to_hex $p $v $t && return
    [[ $i -eq 3 ]] && \
        rgb_to_hex $p $q $v && return
    [[ $i -eq 4 ]] && \
        rgb_to_hex $t $p $v && return
    [[ $i -eq 5 ]] && \
        rgb_to_hex $v $p $q && return

    fatal "Invalid conversion"
}

rgb_value() {
    local HSV
    IFS=" " read -a HSV <<< "$(rgb_to_hsv ${1})"
    local v=${HSV[2]}

    [[ ! "${2}" ]] \
        && echo $v && return 0

    [[ "${2}" =~ ^([+-]?)([0-9]+)(%?)$ ]] || fatal "invalid value"
    local rel=${BASH_REMATCH[1]}
    local val=${BASH_REMATCH[2]}
    local pcn=${BASH_REMATCH[3]}

    # percent value
    [[ "$pcn" ]] \
        && val=$(( $v * $val / 100 ))
	# absolute value
    [[ "$rel" ]] \
        && eval "v=$(( $v $rel $val ))" || v=$val

    hsv_to_rgb ${HSV[0]} ${HSV[1]} $v
}

# Color-management functions --------------------------------------------------
# Clear all color-variables
clear_colors() {
    local i

    background=
    foreground=
    cursor=

    for i in {0..15}; do
        declare -g color"${i}"=
    done
}

# Import colors from xrdb config
import_xrdb_colors() {
    local i color

    background=$(xrdbq background)
    foreground=$(xrdbq foreground)
    cursor=$(xrdbq cursor)

    for i in {0..15}; do
        declare -g color"${i}"=$(xrdbq color"${i}")
    done
}

import_theme_colors() {
    local scheme="$(find_resource ${2:-theme} "${1/\~/$HOME}" 2>/dev/null)"

    [[ ! "${scheme}" ]] \
        && scheme="$(find_resource ${2:-theme} "${1/\~/$HOME}.sh" 2>/dev/null)"

    [[ ! "${scheme}" ]] \
        && fatal "theme '${1}' not existing!"

    source "$scheme" \
        || fatal "theme '${1}' not imported!"
}

merge_theme_colors() {
    import_theme_colors "${1}" merge
}

import_image_colors() {
    local image="${1/\~/$HOME}"
	local colors

	type -p convert >/dev/null 2>&1 \
		|| fatal "imagemagick not found"

    [[ -e "$image" ]] \
		|| fatal "image '${1}' not found"

    colors=(
        $(convert "$image" +dither -colors 16 -unique-colors txt:- | grep -E -o " \#.{6}" 2>/dev/null || fatal)
    )

    color0=$(rgb_value ${colors[0]} $XTHEME_IMPORT_SCALE)
    color1=${colors[9]};
    color2=${colors[10]}
    color3=${colors[11]}
    color4=${colors[12]}
    color5=${colors[13]}
    color6=${colors[14]}
    color7=${colors[15]}
}


apply_colors() {
    local i color

    color0=${color0:-#000000}
    color1=${color1:-#800000}
    color2=${color2:-#008000}
    color3=${color3:-#808000}
    color4=${color4:-#000080}
    color5=${color5:-#800080}
    color6=${color6:-#008080}
    color7=${color7:-#c0c0c0}

    color8=${color8:-$(rgb_value $color0 $XTHEME_BLACK_COLOR_SCALE)}
    color9=${color9:-$(rgb_value $color1 $XTHEME_COLOR_SCALE)}
    color10=${color10:-$(rgb_value $color2 $XTHEME_COLOR_SCALE)}
    color11=${color11:-$(rgb_value $color3 $XTHEME_COLOR_SCALE)}
    color12=${color12:-$(rgb_value $color4 $XTHEME_COLOR_SCALE)}
    color13=${color13:-$(rgb_value $color5 $XTHEME_COLOR_SCALE)}
    color14=${color14:-$(rgb_value $color6 $XTHEME_COLOR_SCALE)}
    color15=${color15:-$(rgb_value $color7 $XTHEME_COLOR_SCALE)}

    if [[ ! $background ]]; then
        background=$(rgb_value $color0 $XTHEME_BASE_COLOR_SCALE)
    fi

    foreground=${foreground:-$(rgb_value $color7 $XTHEME_BASE_COLOR_SCALE)}
    cursor=${cursor:-$XTHEME_CURSOR_COLOR}

    if [[ ! "${XTHEME_PREFER_DARK_THEME}" ]]; then
        color=$foreground; foreground=$background; background=$color
        color=$color0;     color0=$color7;         color7=$color
        color=$color8;     color8=$color15;        color15=$color
    fi
}

# XTheme functions ------------------------------------------------------------
preview_xtheme() {
    local i color

    echo -n "background: "
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $foreground) 
    echo -en "  $background  \033[0m  "

    echo -n "foreground: "
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex $foreground) 
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
    echo -en "  $foreground  \033[0m  "

    echo -n "cursor: "
    printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex $cursor) 
    printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
    echo -en "  $cursor  \033[0m  "

    echo
    printf "â”€%.0s" $(seq 70); echo

    for i in {0..15}; do
        color="color${i}"
        printf "\033[38;2;%03d;%03d;%03dm" $(rgb_from_hex ${!color})
        printf "\033[48;2;%03d;%03d;%03dm" $(rgb_from_hex $background)
        echo -n "${!color}"

        [[ $i == 7 || $i == 15 ]] \
            && echo -e "\033[0m" || echo -n "  "
    done
}

find_resource() {
    local resource="${1}"
    local name="${2/\~/$HOME}"
    local path= paths=(
        "$(dirname "${BASH_SOURCE:-$0}")/${resource}s"
        "${XTHEME_CACHE}/${resource}s"
        "$HOME/.local/share/xtheme/${resource}s"
        "/usr/local/share/xtheme/${resource}s"
        "/usr/share/xtheme/${resource}s"
    )

    for path in ${paths[*]}; do
        [[ -e "$path/$name" ]] \
            && echo "$(realpath "$path/$name")" && return
    done

    [[ -e "$name" ]] \
        && echo "$(realpath "$name")" && return

    error "Resource $resource '${2}' not found"
}

apply() {
    local data
    local srce="${1/\~/$HOME}"
    local dest="${2/\~/$HOME}"

    [[ ! -f "$srce" ]] \
        && return $(error "Template '${srce/$HOME/\~}' not existing!")

    rm    -f "$dest" > /dev/null 2>&1
    mkdir -p "$(dirname "${dest}")" > /dev/null 2>&1

    while read -r data; do
        local IFS=$'\x1B'

        data="${data//\\/\\x5C}"
        data="${data//\"/\\x22}"
        data=$'\x22'$data$'\x22'

        eval echo -e ${data} >> $dest 2>/dev/null \
            || return $(error "Template '${dest/$HOME/\~}' not save!")
    done < $srce
}

template() {
    local path="$(find_resource template "${1}")"
    local name="$(basename "${1}")"
    local dest="${2/\~/$HOME}"

    [[ ! -e "${path}" ]] \
        && echo -e "\033[31m[-] template .../$name is not installed!\033[0m" \
        && return 1

    if [[ -d "$path" ]]; then
        DESTINATION="$dest"
        source "$path/install.sh" \
            && echo -e "\033[32m[+] template .../$name is installed\033[0m" \
            && return 0
    else
        [[ ! "${dest}" ]] && dest="$XTHEME_CACHE"
        [[ -d "$dest" || ${dest: -1} == '/' ]] && dest="$dest/$name"
        apply "$path" "$dest" \
            && echo -e "\033[32m[+] template .../$name is installed\033[0m" \
            && return 0
    fi

    echo -e "\033[31m[-] template .../$name is not installed!\033[0m"
    return 1
}


# -----------------------------------------------------------------------------
#   MAIN
# -----------------------------------------------------------------------------
[[ "${XTHEME_IS_LIB}" ]] && return # run as a library

while [ -n "${1}" ]; do
    case "${1}" in
        --help|-h)
            echo -e "$WELCOME"
            exit 0
            ;;
        --light|-l)
            XTHEME_PREFER_DARK_THEME=
            ;;
        --dark|-d)
            XTHEME_PREFER_DARK_THEME=1
            ;;
        --image|-i)
            XTHEME_IMAGE="${2}"
            XTHEME_NAME=
            shift
            ;;
        --merge|-m)
            XTHEME_MERGE="${2}"
            shift
            ;;
        --save|-s)
            XTHEME_SAVE="${2}"
            shift
            ;;
        --install)
            XTHEME_INSTALL=Yes
            ;;
        *)
            [[ "${1:0:1}" == '-' ]] \
                && fatal "invalid argument: $1"
            XTHEME_NAME="${1}"
            XTHEME_IMAGE=
            ;;
    esac
    shift
done

# Import ----------------------------------------------------------------------
source ~/.xtheme/colors.sh
clear_colors

if [[ "${XTHEME_NAME}" ]]; then
    import_theme_colors "$XTHEME_NAME"
elif [[ "${XTHEME_IMAGE}" ]]; then
    import_image_colors "$XTHEME_IMAGE"
else
    import_xrdb_colors
fi

if [[ "${XTHEME_MERGE}" ]]; then
    merge_theme_colors "$XTHEME_MERGE"
fi

apply_colors
preview_xtheme

# Save ------------------------------------------------------------------------
if [[ "${XTHEME_SAVE}" ]]; then
    template colors.sh "$XTHEME_SAVE" > /dev/null \
        && echo -e "\033[32m[*] theme is saved: $XTHEME_SAVE\033[0m"
fi

# Apply changes ---------------------------------------------------------------
if [[ "${XTHEME_INSTALL}" ]]; then
    mkdir -p "$XTHEME_CACHE"

    # Templates...
    template colors-gtk.css
    template colors-gtk.rc
    template colors-kitty.conf
    template colors-rofi.rasi
    template colors-xfce4-terminal.theme \
        ~/.local/share/xfce4/terminal/colorschemes/xtheme.theme
    template colors.css
    template colors.json
    template colors.sh

    # Modules...
    template gtk-icon-theme/Tela
    template gtk-theme/FlatColor
    template kvantum
    template telegram
    template xrdb
fi
